############################
#  SHARED

broker-register-params: &broker-register-params
  CF_ORGANIZATION: ((broker-organization))
  CF_SPACE: ((broker-space))
  BROKER_NAME: ((name))
  AUTH_USER: ((broker-auth-username))
  AUTH_PASS: ((broker-auth-password))
  SERVICES: ((service-name))

cf-creds-dev: &cf-creds-dev
  CF_API_URL: ((dev-cf-api-url))
  CF_USERNAME: ((dev-cf-username))
  CF_PASSWORD: ((dev-cf-password))
  CF_ORGANIZATION: ((broker-organization))
  CF_SPACE: ((broker-space))

cf-creds-staging: &cf-creds-staging
  CF_API_URL: ((staging-cf-api-url))
  CF_USERNAME: ((staging-cf-username))
  CF_PASSWORD: ((staging-cf-password))
  CF_ORGANIZATION: ((broker-organization))
  CF_SPACE: ((broker-space))

create-postgres-service-params: &create-postgres-service-params
  APP_NAME: ((name))
  SVC_SERVICE: ((db_service))
  SVC_PLAN: ((db_plan))
  SVC_NAME: ((db_name))

create-redis-service-params: &create-redis-service-params
  APP_NAME: ((name))
  SVC_SERVICE: ((redis_service))
  SVC_PLAN: ((redis_plan))
  SVC_NAME: ((redis_name))

upgrade-schema-vars: &upgrade-schema-vars
  FLASK_ENV: upgrade-schema
  APP_NAME: ((name))-db-upgrade
  DB_NAME: ((db_name))
  REDIS_NAME: ((redis_name))

cf-manifest-vars: &cf-manifest-vars
  vars:
    APP_NAME: ((name))
    DB_NAME: ((db_name))
    REDIS_NAME: ((redis_name))

cf-manifest-env-dev: &cf-manifest-env-dev
  environment_variables:
    FLASK_ENV: development
    BROKER_USERNAME: ((broker-auth-username))
    BROKER_PASSWORD: ((broker-auth-password))
    SECRET_KEY: ((flask-secret-key))
    DATABASE_ENCRYPTION_KEY: ((dev-db-encryption-key))
    ROUTE53_ZONE_ID: ((dev-route53-zone-id))
    DNS_ROOT_DOMAIN: ((dev-dns-root-domain))
    DEFAULT_CLOUDFRONT_ORIGIN: ((dev-default-cloudfront-origin-domain-name))
    AWS_GOVCLOUD_DEFAULT_REGION: ((dev-aws-govcloud-region))
    AWS_GOVCLOUD_SECRET_ACCESS_KEY: ((dev-aws-govcloud-secret-access-key))
    AWS_GOVCLOUD_ACCESS_KEY_ID: ((dev-aws-govcloud-access-key-id))
    AWS_COMMERCIAL_DEFAULT_REGION: ((dev-aws-commercial-region))
    AWS_COMMERCIAL_SECRET_ACCESS_KEY: ((dev-aws-commercial-secret-access-key))
    AWS_COMMERCIAL_ACCESS_KEY_ID: ((dev-aws-commercial-access-key-id))

cf-manifest-env-staging: &cf-manifest-env-staging
  environment_variables:
    FLASK_ENV: staging
    BROKER_USERNAME: ((broker-auth-username))
    BROKER_PASSWORD: ((broker-auth-password))
    SECRET_KEY: ((flask-secret-key))
    DATABASE_ENCRYPTION_KEY: ((staging-db-encryption-key))
    ROUTE53_ZONE_ID: ((staging-route53-zone-id))
    DNS_ROOT_DOMAIN: ((staging-dns-root-domain))
    DEFAULT_CLOUDFRONT_ORIGIN: ((staging-default-cloudfront-origin-domain-name))
    AWS_GOVCLOUD_DEFAULT_REGION: ((staging-aws-govcloud-region))
    AWS_GOVCLOUD_SECRET_ACCESS_KEY: ((staging-aws-govcloud-secret-access-key))
    AWS_GOVCLOUD_ACCESS_KEY_ID: ((staging-aws-govcloud-access-key-id))
    AWS_COMMERCIAL_DEFAULT_REGION: ((staging-aws-commercial-region))
    AWS_COMMERCIAL_SECRET_ACCESS_KEY: ((staging-aws-commercial-secret-access-key))
    AWS_COMMERCIAL_ACCESS_KEY_ID: ((staging-aws-commercial-access-key-id))

cf-manifest-env-prod: &cf-manifest-env-prod
  environment_variables:
    FLASK_ENV: production
    BROKER_USERNAME: ((broker-auth-username))
    BROKER_PASSWORD: ((broker-auth-password))
    SECRET_KEY: ((flask-secret-key))
    DATABASE_ENCRYPTION_KEY: ((prod-db-encryption-key))
    ROUTE53_ZONE_ID: ((prod-route53-zone-id))
    DNS_ROOT_DOMAIN: ((prod-dns-root-domain))
    DEFAULT_CLOUDFRONT_ORIGIN: ((prod-default-cloudfront-origin-domain-name))
    AWS_GOVCLOUD_DEFAULT_REGION: ((prod-aws-govcloud-region))
    AWS_GOVCLOUD_SECRET_ACCESS_KEY: ((prod-aws-govcloud-secret-access-key))
    AWS_GOVCLOUD_ACCESS_KEY_ID: ((prod-aws-govcloud-access-key-id))
    AWS_COMMERCIAL_DEFAULT_REGION: ((prod-aws-commercial-region))
    AWS_COMMERCIAL_SECRET_ACCESS_KEY: ((prod-aws-commercial-secret-access-key))
    AWS_COMMERCIAL_ACCESS_KEY_ID: ((prod-aws-commercial-access-key-id))

acceptance-tests-params: &acceptance-tests-params
  PLAN_NAME: "domain-with-cdn"
  SERVICE_NAME: "external-domain"

acceptance-tests-params-staging: &acceptance-tests-params-staging
  DNS_ROOT_DOMAIN: ((staging-dns-root-domain))
  HOSTED_ZONE_ID: ((staging-test-hosted-zone-id))
  TEST_DOMAIN: ((staging-test-domain))
  AWS_ACCESS_KEY_ID: ((staging-test-user-aws-access-key-id))
  AWS_SECRET_ACCESS_KEY: ((staging-test-user-aws-secret-access-key))
  AWS_REGION: ((staging-aws-region))

acceptance-tests-params-prod: &acceptance-tests-params-prod
  DNS_ROOT_DOMAIN: ((prod-dns-root-domain))
  HOSTED_ZONE_ID: ((prod-test-hosted-zone-id))
  TEST_DOMAIN: ((prod-test-domain))
  AWS_ACCESS_KEY_ID: ((prod-test-user-aws-access-key-id))
  AWS_SECRET_ACCESS_KEY: ((prod-test-user-aws-secret-access-key))
  AWS_REGION: ((prod-aws-commercial-region))

############################
#  JOBS

jobs:

- name: reconfigure
  serial: true
  plan:
  - get: src
    params: {depth: 1}
    trigger: true
  - get: secrets
    # Remember to manually trigger a new build if you upload a new version
    # of the credentials file.
    trigger: false
  - set_pipeline: ((name))
    file: src/ci/pipeline.yml
    var_files:
    - secrets/((name)).yml

- name: test
  plan:
  - get: src
    params: {depth: 1}
    trigger: true
    passed: [reconfigure]

  - put: dev-docker-image
    # We push this docker image _only_ so that we can use it in the next task
    # below.  :shrug: concourse.
    params:
      build: src
      dockerfile: src/docker/Dockerfile.dev
      tag_as_latest: true
      cache: true

  - task: test
    # Run the tests using the image pushed above.
    image: dev-docker-image
    config:
      platform: linux
      params:
        TMPDIR: /tmp
      run:
        path: /app/docker/tests

- name: dev
  plan:
  - in_parallel:
    - get: src
      params: {depth: 1}
      trigger: true
      passed: [test]
    - get: pipeline-tasks
  - in_parallel:
    - task: create-postgres
      file: pipeline-tasks/ensure-misbehaved-service.yml
      params:
        <<: *cf-creds-dev
        <<: *create-postgres-service-params
    - task: create-redis
      file: pipeline-tasks/ensure-misbehaved-service.yml
      params:
        <<: *cf-creds-dev
        <<: *create-redis-service-params
  - task: stop-apps
    file: src/ci/stop-apps.yml
    params:
      <<: *cf-creds-dev
      APPLICATIONS: "((name)) ((name))-workers"
  - task: upgrade-schema
    file: src/ci/upgrade-schema.yml
    params:
      <<: *cf-creds-dev
      <<: *upgrade-schema-vars
  - in_parallel:
    - put: cf-dev
      params:
        path: src
        manifest: src/manifests/app.yml
        show_app_log: true
        <<: *cf-manifest-vars
        <<: *cf-manifest-env-dev
    - put: cf-dev
      params:
        path: src
        manifest: src/manifests/workers.yml
        show_app_log: true
        <<: *cf-manifest-vars
        <<: *cf-manifest-env-dev
  - task: register-broker
    file: pipeline-tasks/register-service-broker.yml
    params:
      <<: *cf-creds-dev
      <<: *broker-register-params

- name: staging
  serial_groups: [staging]
  plan:
  - in_parallel:
    - get: src
      params: {depth: 1}
      trigger: true
      passed: [dev]
    - get: pipeline-tasks
  - in_parallel:
    - task: create-postgres
      file: pipeline-tasks/ensure-misbehaved-service.yml
      params:
        <<: *cf-creds-staging
        <<: *create-postgres-service-params
    - task: create-redis
      file: pipeline-tasks/ensure-misbehaved-service.yml
      params:
        <<: *cf-creds-staging
        <<: *create-redis-service-params
  - task: stop-apps
    file: src/ci/stop-apps.yml
    params:
      <<: *cf-creds-staging
      APPLICATIONS: "((name)) ((name))-workers"
  - task: upgrade-schema
    file: src/ci/upgrade-schema.yml
    params:
      <<: *cf-creds-staging
      <<: *upgrade-schema-vars
  - in_parallel:
    - put: cf-staging
      params:
        path: src
        manifest: src/manifests/app.yml
        show_app_log: true
        <<: *cf-manifest-vars
        <<: *cf-manifest-env-staging
    - put: cf-staging
      params:
        path: src
        manifest: src/manifests/workers.yml
        show_app_log: true
        <<: *cf-manifest-vars
        <<: *cf-manifest-env-staging
  - task: register-broker
    file: pipeline-tasks/register-service-broker.yml
    params:
      <<: *cf-creds-staging
      <<: *broker-register-params

- name: staging-acceptance-tests
  serial_groups: [staging]
  plan:
  - in_parallel:
    - get: src
      params: {depth: 1}
      passed: [staging]
    - get: cf-staging
      trigger: true
      passed: [staging]
    - get: dev-docker-image
    - get: test-timer
      trigger: true
  - task: acceptance
    image: dev-docker-image
    timeout: 6h
    config:
      platform: linux
      params:
        <<: *cf-creds-staging
        <<: *acceptance-tests-params
        <<: *acceptance-tests-params-staging
      run:
        path: /app/acceptance/run.sh

############################
#  RESOURCES

resources:

- name: secrets
  type: s3-iam
  icon: cloud-lock
  source:
    region_name: ((concourse-varz-bucket-region))
    bucket: ((concourse-varz-bucket))
    versioned_file: ((name)).yml

- name: src
  type: git
  icon: github-circle
  check_every: 10s
  source:
    uri: https://github.com/cloud-gov/((name))
    branch: ((git-branch))

- name: dev-docker-image
  type: docker-image
  icon: docker
  source:
    email: ((docker-email))
    username: ((docker-username))
    password: ((docker-password))
    repository: ((docker-image-dev))

- name: cf-dev
  type: cf
  icon: cloud-upload
  source:
    api: ((dev-cf-api-url))
    username: ((dev-cf-username))
    password: ((dev-cf-password))
    organization: ((broker-organization))
    space: ((broker-space))

- name: cf-staging
  type: cf
  icon: cloud-upload
  source:
    api: ((staging-cf-api-url))
    username: ((staging-cf-username))
    password: ((staging-cf-password))
    organization: ((broker-organization))
    space: ((broker-space))

- name: pipeline-tasks
  type: git
  icon: github-circle
  source:
    uri: ((pipeline-tasks-git-url))
    branch: ((pipeline-tasks-git-branch))

- name: test-timer
  type: time
  source:
    start: 8:00 AM
    stop: 8:00 PM
    timezone: America/New_York
    days:
      - Monday
      - Tuesday
      - Wednesday
      - Thursday
      - Friday

############################
#  RESOURCE TYPES

resource_types:

- name: s3-iam
  type: docker-image
  source:
    repository: 18fgsa/s3-resource
